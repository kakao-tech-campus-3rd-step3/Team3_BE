name: Build & Deploy (EC2 / CodeDeploy)

on:
  push:
    branches: [ develop, main ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  S3_BUCKET: ${{ secrets.S3_BUCKET }}
  CODEDEPLOY_APP: ${{ secrets.CODEDEPLOY_APP }}
  CODEDEPLOY_GROUP_DEV: ${{ secrets.CODEDEPLOY_GROUP_DEV }}
  #  CODEDEPLOY_GROUP_PROD: <나중에-PROD-배포그룹-이름>

jobs:
  # A) Test (항상 test 프로필)
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests (test profile)
        run: ./gradlew clean test -Dspring.profiles.active=test --no-daemon

  # B) Build & Deploy
  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 브랜치별 bootJar만 생성 (테스트 스킵)
      - name: Build for DEV (develop)
        if: github.ref == 'refs/heads/develop'
        run: ./gradlew clean bootJar -Dspring.profiles.active=dev -x test --no-daemon

      - name: Build for PROD (main)
        if: github.ref == 'refs/heads/main'
        run: ./gradlew clean bootJar -Dspring.profiles.active=prod -x test --no-daemon

      # 배포 번들: JAR + appspec.yml + scripts/* + .env
      - name: Prepare deploy bundle
        run: |
          mkdir -p deploy
          cp build/libs/*.jar deploy/app.jar
          cp appspec.yml deploy/
          cp -r scripts deploy/

          # 브랜치별 프로필 값
          if [ "${GITHUB_REF##*/}" = "develop" ]; then PROFILE=dev; else PROFILE=prod; fi

          # .env 파일 생성(EC2에서 scripts/deploy.sh가 읽음)
          cat > deploy/.env << EOF
          DB_URL=${{ secrets.DB_URL }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          SPRING_PROFILES_ACTIVE=${PROFILE}
          EOF

          cd deploy && zip -r ../bundle-${GITHUB_SHA}.zip .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.CICD_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CICD_SECRET_KEY }}

      - name: Upload to S3
        run: aws s3 cp bundle-${GITHUB_SHA}.zip s3://${{ env.S3_BUCKET }}/bundle-${GITHUB_SHA}.zip

      # develop → DEV 배포
      - name: Deploy to DEV (develop)
        if: github.ref == 'refs/heads/develop'
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODEDEPLOY_APP }} \
            --deployment-group-name ${{ env.CODEDEPLOY_GROUP_DEV }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --s3-location bucket=${{ env.S3_BUCKET }},key=bundle-${GITHUB_SHA}.zip,bundleType=zip

      # main → PROD 배포
      - name: Deploy to PROD (main)
        if: github.ref == 'refs/heads/main'
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODEDEPLOY_APP }} \
            --deployment-group-name ${{ env.CODEDEPLOY_GROUP_PROD }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --s3-location bucket=${{ env.S3_BUCKET }},key=bundle-${GITHUB_SHA}.zip,bundleType=zip
